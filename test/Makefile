# Makefile for building Google Test and using it for testing the
# Fusion library.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Points to the root of Google Test.
GTEST_DIR = /usr/src/gtest

# Where to find user test and source code.
USER_DIR     = .
SRC_DIR      = $(USER_DIR)/..
SRC_UTIL_DIR = $(SRC_DIR)/utility

# Archiver program.
AR = ar

# Compiler program.
CXX = g++

# Flags passed to the preprocessor.
# The first line is required by Google Test.
CPPFLAGS += -I$(GTEST_DIR)/include
CPPFLAGS += -I$(USER_DIR) -I$(SRC_DIR) -I$(SRC_UTIL_DIR)

# Flags passed to the C++ compiler.
# The first line is required by Google Test.
CXXFLAGS += -g -Wall -Wextra
CXXFLAGS += -std=c++03

# Flags passed to the linker.
# The first line is required by Google Test.
LDFLAGS += -lpthread
LDFLAGS += -lm

# Flags passed to the archiver.
ARFLAGS = rcs

# All tests produced by this Makefile. Remember to add new tests you
# created to the list. Also remember to include a suffix of '_unittest'
# to each test you name.
TESTS = math_extra_unittest    \
        vector_unittest        \
        quaternion_unittest    \
        filter_unittest        \
        complementary_unittest \
        kalman_unittest

# All Google Test headers. Usually you shouldn't change this
# definition.
GTEST_HEADERS = /usr/include/gtest/*.h \
                /usr/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

mostlyclean :
	rm -f $(TESTS) *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized. This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds the unit tests for math extra.

math_extra.o : $(SRC_UTIL_DIR)/math_extra.cpp \
               $(SRC_UTIL_DIR)/math_extra.h \
               $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_UTIL_DIR)/math_extra.cpp

math_extra_unittest.o : $(USER_DIR)/math_extra_unittest.cpp \
                        $(SRC_UTIL_DIR)/math_extra.h \
                        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/math_extra_unittest.cpp

math_extra_unittest : math_extra.o math_extra_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

# Builds the unit tests for vectors.

vector.o : $(SRC_UTIL_DIR)/vector.cpp \
           $(SRC_UTIL_DIR)/vector.h \
           $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_UTIL_DIR)/vector.cpp

vector_unittest.o : $(USER_DIR)/vector_unittest.cpp \
                    $(SRC_UTIL_DIR)/vector.h \
                    $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/vector_unittest.cpp

vector_unittest : math_extra.o vector.o vector_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

# Builds the unit tests for quaternions.

quaternion.o : $(SRC_UTIL_DIR)/quaternion.cpp \
               $(SRC_UTIL_DIR)/quaternion.h \
               $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_UTIL_DIR)/quaternion.cpp

quaternion_unittest.o : $(USER_DIR)/quaternion_unittest.cpp \
                        $(SRC_UTIL_DIR)/quaternion.h \
                        $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/quaternion_unittest.cpp

quaternion_unittest : math_extra.o quaternion.o quaternion_unittest.o \
                      gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

# Builds the unit tests for the filter interface.

filter.o : $(SRC_DIR)/filter.cpp \
           $(SRC_DIR)/filter.h \
           $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_DIR)/filter.cpp

filter_unittest.o : $(USER_DIR)/filter_unittest.cpp \
                    $(SRC_DIR)/filter.h \
                    $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/filter_unittest.cpp

filter_unittest : filter.o filter_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

# Builds the unit tests for the complementary filters.

complementary.o : $(SRC_DIR)/complementary.cpp \
                  $(SRC_DIR)/complementary.h \
                  $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_DIR)/complementary.cpp

complementary_unittest.o : $(USER_DIR)/complementary_unittest.cpp \
                           $(SRC_DIR)/complementary.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/complementary_unittest.cpp

complementary_unittest : complementary.o complementary_unittest.o filter.o \
                         gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

# Builds the unit tests for the Kalman filters.

kalman.o : $(SRC_DIR)/kalman.cpp \
           $(SRC_DIR)/kalman.h \
           $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SRC_DIR)/kalman.cpp

kalman_unittest.o : $(USER_DIR)/kalman_unittest.cpp \
                    $(SRC_DIR)/kalman.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/kalman_unittest.cpp

kalman_unittest : kalman.o kalman_unittest.o filter.o \
                  gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)

